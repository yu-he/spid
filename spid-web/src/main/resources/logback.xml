<?xml version="1.0" encoding="utf-8"?>

<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->

<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 定义参数常量 -->
	<property name="log.level" value="debug"/>
	<property name="log.maxHistory" value="30"/>
	<property name="log.filePath" value="/temp"/>
	<property name="log.maxFileSize" value="10MB"/>
	<property name="log.totalSizeCap" value="50MB"/>
	<property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS}[%thread]%-5level %logger{50} - %msg%n"/>

	<!-- 输出到控制台 -->
	<!-- appender用于给出日志的输出媒介，这里是控制台	-->
	<!-- pattern用于定义日志的输出格式 -->
	<appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>
				${log.pattern}
			</pattern>
		</encoder>
	</appender>

	<!--输出到文件-->
	<!-- debug级别 -->
	<appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--文件路径-->
		<file>${log.filePath}/debug.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
			<!-- 文件最大保存的数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
			<!--单个日志最大容量 至少10MB才能看得出来-->
			<maxFileSize>${log.maxFileSize}</maxFileSize>
			<!--该滚动策略日志的总大小，超过的日志会被清除-->
			<totalSizeCap>${log.totalSizeCap}</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>
		<!--过滤掉不是Debug级别的日志，只记录debug级别的日志-->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
	</appender>

	<!-- info级别 -->
	<appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.filePath}/info.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
			<!-- 文件最大保存的数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
			<!--单个日志最大容量 至少10MB才能看得出来-->
			<maxFileSize>${log.maxFileSize}</maxFileSize>
			<!--该滚动策略日志的总大小，超过的日志会被清除-->
			<totalSizeCap>${log.totalSizeCap}</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
	</appender>

	<!-- ERROR级别 -->
	<appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${log.filePath}/error.log</file>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 -->
			<fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz
			</fileNamePattern>
			<!-- 文件最大保存的数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
			<!--单个日志最大容量 至少10MB才能看得出来-->
			<maxFileSize>${log.maxFileSize}</maxFileSize>
			<!--该滚动策略日志的总大小，超过的日志会被清除-->
			<totalSizeCap>${log.totalSizeCap}</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>${log.pattern}</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>ERROR</level>
		</filter>
	</appender>

	<root level="info">
		<!--跟控制台的appender进行绑定-->
		<appender-ref ref="consoleAppender"/>
	</root>
	<!--name用于指定工程项目的包名，记录该包下的日志信息-->
	<!--level指定为debug，代表只记录debug以上级别的日志-->
	<logger name="com.yuhe.spid" level="${log.level}" additivity="true">
		<!--跟文件相关的appender进行绑定-->
		<appender-ref ref="debugAppender"/>
		<appender-ref ref="infoAppender"/>
		<appender-ref ref="errorAppender"/>
	</logger>
</configuration>
